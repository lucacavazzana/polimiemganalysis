/****************************************************
EracleSerialPortManager.cpp:
*
Read data generated by sEMG board for NUM_ACQ times.
Data are stored in \Storage Card\DatiNUM_ACQ.
Every burst fill a CHAR buffer of 15000 elements.
*****************************************************/

#include "stdafx.h"
#include "Eracle.h"
#include <iostream>
#include <sstream>
#include "s2ws.h"


#define MAX_LOADSTRING 100

// number of training movements
#define NUM_ACQ 10

// number of samples
#define DIM_CHANNEL 1010

using namespace std;

void EracleSerialPortManager(){

	HANDLE hSer; /* FTDI port handler */
	HANDLE hFile; /* data file handler */

	INT rc;
	BYTE szText[10] = {0x41,0x42, 0x43, 0x44, 0x45};
	CHAR buffer[15000]; /* read buffer of FTDI port */
	DWORD bytesRead;

	int indice = 1; // while loop index
	ostringstream oss; // service stream for itoa conversion

	/* this loop run for NUM_ACQ cycles,
	 * at every iteration one different data
	 * file is created and filled with sEMG board data */
	while(indice <= NUM_ACQ){

		/* itoa conversion of loop index,
		 * to mark the data file */
		oss << indice;
		string index = oss.str();

		/* create a file which emulate the FTDI/serial port.
		 * File must be named $device \ COM10 */
		hSer = CreateFile(TEXT("$device\\COM10"),
				GENERIC_READ | GENERIC_WRITE, 0,
				NULL, OPEN_EXISTING, 0, NULL);

		if( hSer == INVALID_HANDLE_VALUE){
			MessageBox(NULL, TEXT("Port is not opened"), TEXT("EracleSerialPort"), MB_OK);
			exit(0);
		}

		/* serial port settings */
		DCB dcb;
		dcb.DCBlength = sizeof(dcb);
		GetCommState(hSer, &dcb);
		dcb.BaudRate = 57600;
		if(SetCommState(hSer, &dcb)) {
			MessageBox(NULL, TEXT("Port is opened with baud rate 57600"
					" - Ready to sEMG acquisition"
					"\nPRESS ENTER TO BEGIN ACQUISITION"),
					TEXT("EracleSerialPortManager"), MB_OK);
		}

		PurgeComm(hSer, PURGE_TXABORT | PURGE_RXABORT | PURGE_TXCLEAR | PURGE_RXCLEAR);

		/* check if you can read from FTDI port ...
		 * ... if ok, read and put data in buffer */
		if(rc = ReadFile(hSer, buffer, sizeof(buffer), &bytesRead, 0))
			MessageBox(NULL, TEXT("END OF ACQUISITION"), TEXT("EracleSerialPortManager"), MB_OK);

		/* definition of data file name and path */
		string pre = "\\Storage Card\\Eracle_Acquisizioni\\DATI";
		string suff = ".txt ";
		string path = pre + index + suff;
		std::wstring stemp = s2ws(path);
		LPCWSTR result = stemp.c_str();
		hFile = CreateFile(result,
				(GENERIC_READ | GENERIC_WRITE),
				0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);

		if(!( WriteFile(hFile, buffer, sizeof(buffer), &bytesRead, 0))){
			MessageBox(NULL, TEXT("Error in file writing", TEXT("EracleSerialPortManager"), MB_OK);
			exit(0);
		}

		/* close file handlers */
		CloseHandle(hFile);
		CloseHandle(hSer);

		indice++; // while loop variable increase

		// service stream flush
		oss.str("");
		oss.clear();
	}


	MessageBox(NULL, TEXT("End of acquisition procedure"), TEXT("EracleSerialPortManager"), MB_OK);
	return;
}